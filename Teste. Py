import time
import logging
import re
import requests
import sys
from bs4 import BeautifulSoup
from logging import StreamHandler
from pyzabbix import ZabbixMetric, ZabbixSender
from platform import node

log_filename = "nome_do_log.txt"
logging.basicConfig(filename=log_filename, level=logging.ERROR, format="%(asctime)s [%(levelname)s]: %(message)s")
console_handler = StreamHandler()
console_handler.setLevel(logging.INFO)
logging.getLogger().addHandler(console_handler)

patterns_not_found = []

try:
    # Fazendo a requisição à página do Grafana
    url = 'Link do Grafana'
    usuario = "Inserir usuário"
    senha = 'Inserir senha'

    # Realiza a requisição inicial para obter o conteúdo da página (supondo que não há autenticação complexa envolvida)
    session = requests.Session()
    response = session.get(url, auth=(usuario, senha))
    
    # Verifica se a requisição foi bem-sucedida
    if response.status_code != 200:
        logging.error(f"Falha ao acessar a página. Status Code: {response.status_code}")
        sys.exit(1)

    # Analisa o conteúdo da página com BeautifulSoup
    soup = BeautifulSoup(response.text, 'html.parser')

    # Validar arquivo definindo o início e final de sua nomenclatura
    padrao = re.compile(r'Referência incial do arquivo.*Referência')
    informacao_acuse_001 = soup.find(string=padrao)
    
    if informacao_acuse_001:
        print("O seguinte arquivo foi encontrado:", informacao_acuse_001.strip())
        # Envia status de sucesso para o Zabbix
        zhostname = node()
        metrics = [ZabbixMetric(zhostname, 'nome do item do zabbix', 'success')]
        ZabbixSender('host da maquina').send(metrics)
        sys.exit(0)
    else:
        # Lógica para enviar alerta para o PagerDuty caso o arquivo não seja encontrado
        titulo_alerta = "Alerta: Informação 'nome do arquivo' não encontrada"
        descricao_alerta = "Arquivo nome do arquivo não encontrado, devemos seguir o fluxo adequado para solucionar o problema."
        pagerduty_routing_key = "inserir token"
        pagerduty_event_action = "trigger"
        alert_data = {
            "payload": {
                "summary": titulo_alerta,
                "severity": "critical",
                "source": "Alert source",
                "custom_details": {
                    "descricao": descricao_alerta
                }
            },
            "routing_key": pagerduty_routing_key,
            "event_action": pagerduty_event_action
        }
        pagerduty_url = "Link do Pagerduty"
        max_tentativas = 10
        tentativa_atual = 1
        while tentativa_atual <= max_tentativas:
            try:
                response = requests.post(pagerduty_url, json=alert_data, headers={"Content-Type": "application/json"})
                response.raise_for_status()
                print("Alerta enviado com sucesso para o PagerDuty!")
                break
            except requests.exceptions.RequestException as req_ex:
                print(f"Tentativa {tentativa_atual}: Erro ao enviar o alerta para o PagerDuty: {req_ex}")
                tentativa_atual += 1
                if tentativa_atual <= max_tentativas:
                    print(f"Esperando 60 segundos antes da próxima tentativa...")
                    time.sleep(60)
                else:
                    logging.error(f"Atenção: Falha após {max_tentativas} tentativas. Erro: {req_ex}")
                    logging.info("Informação adicional quando ocorreu um erro.")
except Exception as ex:
    logging.error(str(ex))
    logging.info("Informação adicional quando ocorreu um erro.")
finally:
    print("O script rodou com sucesso!")
    # Lógica para enviar status para o Zabbix após 10 tentativas sem sucesso
    if "tentativa_atual" in locals() and tentativa_atual > max_tentativas:
        print(f"O script falhou após {max_tentativas} tentativas. Enviando status 'failed' para o Zabbix.")
        zhostname = node()
        metrics = [ZabbixMetric(zhostname, 'nome do item do Zabbix', 'failed')]
        ZabbixSender('Host da maquina').send(metrics)
    else:
        print("O script foi executado com sucesso e o status 'success' foi enviado para o Zabbix.")
